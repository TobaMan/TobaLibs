import : libcompiler / compiler
import : libpath / path

export="

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#ifdef _WIN32
#define EXPORT __declspec(dllexport)
#else
#define EXPORT
#endif

char *scpy (const char *s);
void upperc (const char *s);

char *scpy (const char *s){
	char *d=NULL;int size=strlen(s);
	if(!size){return NULL;}
	d=(char*)calloc(size+1,1);            
	memcpy(d,s,size);return d;}

void upperc (char *s){
	int i=0;
	while(s[i]) {
		  s[i]=toupper(s[i]);
		  i++;}}
	
EXPORT char* UpperCase(char* str){
	upperc(str);
	return(scpy(str));
}
"

func:CreateDl(code){
	@Create dynamic librairy from C code.
	code : A string that contain C code.@
	curpath=fspath(2)
	dlpath=path::GetPath(curpath)
	fname=path::GetName(curpath)
	fname=path::RemoveExt(fname)
	srcpath=dlpath$fname$".c"
	scrname=fname$".c"
	dlname=fname$".dll"
	fswritef(srcpath,code)
	compiler::Compile(dlpath,scrname,dlname,compiler::DLL)
	fsremove(srcpath)
}


func:Test(string){
	curpath=fspath(2)
	dlpath=path::GetPath(curpath)
	fname=path::GetName(curpath)
	fname=path::RemoveExt(fname)
	dlname=fname$".dll"
	dlib=dlopen(dlname,dlcdecl())
	
	@ptr=ctoptr(cstring(),string)@
	stringsize=size(string)
	string=str(num(string)$0)
	ptr=ctoptr(cchar(),string)
	
	args=(cpointer(),(cpointer(),ptr))
	ret=dlcall(dlib,"UpperCase",args)
	
	@string=cfromptr(ret,cstring(),-1)@
	string=str(cfromptr(ret,cchar(),stringsize))
	
	cfreeptr(ret);cfreeptr(ptr)
	dlclose(dlib);return(string)}

@CreateDl(export)@
print(Test("bonjour tout le monde !"))